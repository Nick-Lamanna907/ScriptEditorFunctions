const PRESENTATION_ID = '1qLn8K7VHbxVx0oF46ETOGFUInneVMPPftmZ7GArQf_rbT5CBxcnCRIcF'

function onOpen() {
  var ui = SlidesApp.getUi();
  ui.createMenu('My Functions')
      .addSubMenu(ui.createMenu('Code Slides')
          .addItem('Update Colours', 'updateCodeTextColours'))
      .addToUi();
}

function updateCodeTextColours() {
  /* Choose a page element that contains code, and this function will update all the colours,
  according to the CSinSC style guide.

  Inputs:
      - n/a

  Outputs:
      - n/a */

  var selection = SlidesApp.getActivePresentation().getSelection();
  var selectionType = selection.getSelectionType();
  const regex = /"[a-zA-Z0-9 :!''â€™.?=$\[\]\(\)]+"/g;
  const text = ['print', 'if', 'elif', 'else', 'input'];

  if (selectionType == "PAGE_ELEMENT") {
    var currentPage = selection.getCurrentPage();
    var pageElements = selection.getPageElementRange().getPageElements(); // Gets all elements on a page

    if (pageElements.length == 1) {                                       // If you chose one element...
      var shape = pageElements[0].asShape();                              //    Turn it into a shape
      var textRange = shape.getText();
      textRange.getTextStyle().setForegroundColor('#000000');             //    Set all of the text in the shape to black
      var stringToSearch = textRange.asString();                          //    Get string inside shape
      var listOfWords = regexExtractWords(stringToSearch, regex);         //    Search for particular strings inside shape
      var textToChange = text.concat(listOfWords);                        //    Create mega list of all strings to replace

      for (let i = 0; i < textToChange.length; i++) {                     //    For each item in the list...
        var keyword = textRange.find(textToChange[i]);                    //        Find the words
        for (let j = 0; j < keyword.length; j++) {                        //        For each word...
          colour(text[i],keyword[j]);                                     //            Replace word
        }
      }
    } else {                                                              // If you chose too many elements
      Logger.log("Choose 1 textbox/shape.");
    }
  } else {                                                                // If you didnt choose a textbox or shape
    Logger.log("Choose a textbox/shape.");
  }
  SlidesApp.getUi();                                                      // Update menu items with this function
}

function regexExtractWords(text, regex) {
/* Provides a list of substrings that all match the regex passed in 

  Inputs:
      - text: a string
      - regex: the regular expression to match

  Outputs:
      - found: list of strings that match the regex */

  const found = text.match(regex);
  return found
}

function colour(searchWord, replaceWord) {
/* Changes the replaceWord to the colour attached to the searchWord

  Inputs:
      - searchWord: the word you are searching for
      - replaceWord: the word you want to replace

  Outputs:
      - n/a */

  switch (searchWord) {
    case 'print':
      replaceWord.getTextStyle().setForegroundColor('#9900ff');
      break;
    case 'if':
      replaceWord.getTextStyle().setForegroundColor('#0000ff');
      break;
    case 'elif':
      replaceWord.getTextStyle().setForegroundColor('#0000ff');
      break;
    case 'else':
      replaceWord.getTextStyle().setForegroundColor('#0000ff');
      break;
    case 'input':
      replaceWord.getTextStyle().setForegroundColor('#9900ff');
      break;
    default:
      replaceWord.getTextStyle().setForegroundColor('#980000');
      break;
  }
}
